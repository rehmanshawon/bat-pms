/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable prettier/prettier */
import { Inject, Injectable, OnModuleInit } from '@nestjs/common';
import { Command, CommandArguments, _cli } from '@squareboat/nest-console';
import { KNEX_CONNECTION } from 'src/knexmodule';
import { CliService } from 'src/global/cli.oracle.service';
import {
  generateFormColumn,
  generateFormElement,
} from './apsisengine/common/helpers/cliGeneratorForPostgresql';
import { createMigraionFile } from './apsisengine/common/helpers/migrationGenerateHelper';
import { ModuleChangerService } from './apsisengine/modulechanger/index';
import { KnexErrorService } from 'src/apsisengine/common/knexerrors';
import { NotificationManagerService } from './apsisengine/notification-manager/notification-manager.service';
@Injectable()
export class AppService implements OnModuleInit {
  constructor(
    @Inject(KNEX_CONNECTION) private readonly knex,
    private readonly knexErrorService: KnexErrorService,
    private readonly moduleChangerService: ModuleChangerService,
    private readonly cliService: CliService,
    private readonly notificationManagerService: NotificationManagerService,
  ) {}
  @Command('masterentry', {
    desc: 'Test Command',
    args: { name: { req: false } },
  })
  async crudGeneratorWithDTO(args: CommandArguments) {
    await this.cliService.crudGenerator();
  }
  onModuleInit() {
    this.moduleChangerService.companyAndModuleWiseMenusDataSet();
  }
  getHello(): string {
    return 'Hello World!';
  }
  @Command('formelement', {
    desc: 'Generationg form elements for frontend',
    args: { name: { req: false } },
  })
  async formElementGenerate() {
    await this.cliService.formElement();
  }

  async testNotify(data, jwtPayload){
    const result = await this.notificationManagerService.sendNotification(
      data,
      jwtPayload,
    );

    return result;
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  // async formElement(table_name = 1, is_schema = 0) {
  //   let table = 'testing_table';
  //   let table_schema = is_schema;
  //   if (is_schema === 0) {
  //     const data = await this.tablescheam();
  //     table = data[0];
  //     table_schema = data[1];
  //   }
  //   let slug_error = true;
  //   //check given slug is already exist in database then take another slug name
  //   do {
  //     const form_slug = await _cli.ask('create a slug_name: ');
  //     const check_slug = await this.checkSlug(form_slug);
  //     let slug_name = form_slug;
  //     let form_title = slug_name.replace(/_/g, ' ');
  //     if (check_slug !== undefined) {
  //       slug_error = true;
  //       _cli.info('slug_name is already exist. try with another name!');
  //     }
  //     if (check_slug === undefined) {
  //       //if slug name given empty
  //       if (slug_name === '') {
  //         const result = await this.autoGeneratedSlug(table);
  //         slug_name = result[0];
  //         form_title = result[1];
  //       }
  //       const formColumns = await generateFormColumn(slug_name, form_title);
  //       const primaryKey = await this.primaryKeyOfTable(table);
  //       const foreignKeys = await this.foreignKeysGenerate(table);
  //       const checksField = await this.checkFieldGenerate(table);
  //       const formElements = await generateFormElement(
  //         table_schema,
  //         slug_name,
  //         table,
  //         primaryKey,
  //         foreignKeys,
  //         checksField,
  //       );
  //       await this.makeForm(formColumns, slug_name, form_title);
  //       await this.makeFormElement(formElements);
  //       slug_error = false;
  //     }
  //   } while (slug_error);
  //   // console.log(table);
  //   // console.log(table_schema);
  //   // const formElements = await generateFormElement(table, table_schema);
  //   // await this.makeFormAndElementTable(formColumns, formElements);
  //   // console.log(table_schema);
  // }
  // async tablescheam() {
  //   let error = true;
  //   let table_schema;
  //   let table;
  //   do {
  //     table = await _cli.ask('Enter table name:');
  //     if (table) {
  //       try {
  //         const table_schemas: any = await this.knex
  //           .select(
  //             'character_maximum_length',
  //             'is_nullable',
  //             'column_name',
  //             'udt_name',
  //             'numeric_precision',
  //             'numeric_scale',
  //           )
  //           .from('information_schema.columns')
  //           .where({ table_schema: 'public', table_name: table });
  //         // eslint-disable-next-line @typescript-eslint/no-unused-vars
  //         table_schema = table_schemas;
  //         if (table_schema.length > 0) {
  //           error = false;
  //         } else {
  //           _cli.info('Wrong table name. try again!');
  //         }
  //       } catch (error) {
  //         throw error;
  //       }
  //     }
  //   } while (error);
  //   return [table, table_schema];
  // }
  // async makeFormElement(formElements) {
  //   await this.knex('sys_form_elements')
  //     .insert(formElements)
  //     .catch((error) => this.knexErrorService.errorMessage(error.message));
  // }
  // async makeForm(payload, slug_name, form_title) {
  //   payload.form_slug = slug_name;
  //   payload.form_title = form_title;
  //   await this.knex('sys_forms')
  //     .insert(payload)
  //     .catch((error) => this.knexErrorService.errorMessage(error.message));
  // }
  // async checkSlug(form_slug) {
  //   const result = await this.knex('sys_forms')
  //     .select()
  //     .where({
  //       form_slug: form_slug,
  //     })
  //     .first()
  //     .catch((error) => this.knexErrorService.errorMessage(error.message));
  //   return result;
  // }
  // async autoGeneratedSlug(table) {
  //   const result = table.split(/_(.*)/)[1];
  //   const random = (Math.random() + 1).toString(36).substring(7);
  //   let form_slug = result + '_form_' + random;
  //   let form_title = form_slug.replace(/_/g, ' ');
  //   let check = true;
  //   do {
  //     const result = await this.knex('sys_forms')
  //       .select()
  //       .where({
  //         form_slug: form_slug,
  //       })
  //       .first()
  //       .catch((error) => this.knexErrorService.errorMessage(error.message));
  //     if (result === undefined) {
  //       check = false;
  //     } else {
  //       form_slug = result + '_form_' + random;
  //       form_title = form_slug.replace(/_/g, ' ');
  //     }
  //   } while (check);
  //   return [form_slug, form_title];
  // }
  // async primaryKeyOfTable(tableName) {
  //   const schema_data = await this.knex.raw(`SELECT C
  //   ."column_name"
  // FROM
  //   information_schema.table_constraints tc
  //   JOIN information_schema.constraint_column_usage AS ccu USING ( CONSTRAINT_SCHEMA, CONSTRAINT_NAME )
  //   JOIN information_schema.COLUMNS AS C ON C.table_schema = tc.CONSTRAINT_SCHEMA
  //   AND tc.TABLE_NAME = C.TABLE_NAME
  //   AND ccu.COLUMN_NAME = C.COLUMN_NAME
  // WHERE
  //   constraint_type = 'PRIMARY KEY'
  //   AND tc.TABLE_NAME = '${tableName}'`);

  //   return schema_data.rows[0].column_name;
  // }
  // async foreignKeysGenerate(tableName) {
  //   const result = await this.knex.raw(`
  //   SELECT
  //     *
  //   FROM
  //     information_schema.key_column_usage
  //   WHERE
  //     CONSTRAINT_CATALOG = CURRENT_CATALOG
  //     AND TABLE_NAME = '${tableName}'
  //     AND position_in_unique_constraint NOTNULL;
  //   `);
  //   const foreignKeys = [];
  //   result.rows.map((item) => {
  //     if (item.column_name !== 'company_id') {
  //       foreignKeys.push(item.column_name);
  //     }
  //   });
  //   return foreignKeys;
  // }
  // async checkFieldGenerate(table) {
  //   const result = await this.knex.raw(`SELECT
  //   cc.check_clause
  // FROM
  //   information_schema.table_constraints tc
  //   JOIN information_schema.check_constraints cc ON tc.CONSTRAINT_SCHEMA = cc.CONSTRAINT_SCHEMA
  //   AND tc.CONSTRAINT_NAME = cc.CONSTRAINT_NAME

  // WHERE
  //   tc.TABLE_NAME = '${table}'
  //   AND constraint_type = 'CHECK';`);
  //   return result.rows;
  // }
  //   @Command('migration', {
  //     desc: 'Generating migration file from database',
  //     args: { name: { req: false } },
  //   })
  //   async migrationGenerate() {
  //     const result = await this.knex('information_schema.tables')
  //       .where({
  //         table_schema: 'public',
  //       })
  //       .select('table_name')
  //       .catch((error) => this.knexErrorService.errorMessage(error.message));
  //     const finalResult = result.filter(
  //       (item) =>
  //         item.table_name !== 'knex_migrations' &&
  //         item.table_name !== 'knex_migrations_lock',
  //     );
  //     const migrationDataArray = [];
  //     const withoutPrimaryKey = [
  //       'sys_privilege_roles',
  //       'sys_company_modules',
  //       'sys_privilege_modules',
  //       'sys_privilege_features',
  //       'sys_privilege_menus',
  //       'sys_privilege_item_users',
  //       'sys_delegation_historys',
  //       'rms_premises_ccs',
  //     ];
  //     for (let index = 0; index < finalResult.length; index++) {
  //       const table_name = finalResult[index].table_name;
  //       const information: any = {};
  //       const schema = await this.basicSchema(table_name);
  //       information.table_name = table_name;
  //       information.basicSchema = schema;
  //       information.primaryKey = withoutPrimaryKey.includes(table_name)
  //         ? null
  //         : await this.primaryKeyOfTable(table_name);
  //       information.foreignKeys = await this.forekeysAdditional(table_name);
  //       migrationDataArray.push(information);
  //     }
  //     const path = 'src/testMigration';
  //     // eslint-disable-next-line @typescript-eslint/no-var-requires
  //     const fs = require('fs').promises;
  //     await fs.mkdir(path, { recursive: true });
  //     const data = createMigraionFile(migrationDataArray, path);
  //   }
  //   async basicSchema(table) {
  //     const table_schemas: any = await this.knex
  //       .select(
  //         'character_maximum_length',
  //         'is_nullable',
  //         'column_name',
  //         'udt_name',
  //         'numeric_precision',
  //         'numeric_scale',
  //       )
  //       .from('information_schema.columns')
  //       .where({ table_schema: 'public', table_name: table })
  //       .catch((error) => this.knexErrorService.errorMessage(error.message));
  //     return table_schemas;
  //   }

  //   async forekeysAdditional(table) {
  //     const result = await this.knex
  //       .raw(`SELECT conrelid::regclass AS table_name,
  //   conname AS foreign_key,
  //   pg_get_constraintdef(oid)
  // FROM   pg_constraint
  // WHERE  contype = 'f' and conrelid::regclass::text = '${table}'
  // AND    connamespace = 'public'::regnamespace
  // ORDER  BY conrelid::regclass::text, contype DESC; `);
  //     const item = result.rows;
  //     const foreignKeys = [];
  //     for (let index = 0; index < item.length; index++) {
  //       const obj: any = {};
  //       const slug = item[index].pg_get_constraintdef;
  //       const table_key = slug.slice(slug.indexOf('(') + 1, slug.indexOf(')'));
  //       const string = slug;
  //       const first = (await this.getPosition(string, '(', 2)) + 1;
  //       const second = await this.getPosition(string, ')', 2);
  //       const whiteSpace = await this.getPosition(string, ' ', 4);
  //       const foreign_key = slug.slice(first, second);
  //       const foreign_table = slug.slice(whiteSpace + 1, first - 1);
  //       obj.table_key = table_key;
  //       obj.foreign_key = foreign_key;
  //       obj.foreign_table = foreign_table;
  //       foreignKeys.push(obj);
  //     }
  //     return foreignKeys;
  //   }
  //   async getPosition(string, subString, index) {
  //     return string.split(subString, index).join(subString).length;
  //   }
}
